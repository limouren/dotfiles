name: Update Packages

on:
  schedule:
    # Run daily at 9 AM HKT (1 AM UTC)
    - cron: "0 1 * * *"
  workflow_dispatch:
    # Allow manual triggering

jobs:
  update-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add nixpkgs channel
        run: nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs && nix-channel --update

      - name: Install Home Manager
        run: |
          nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
          nix-channel --update
          nix-shell '<home-manager>' -A install

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make scripts executable
        run: |
          chmod +x scripts/update-packages.sh
          chmod +x scripts/parse-package-changes.sh

      - name: Update packages
        id: update
        run: |
          echo "Updating all packages..."

          # Run the update script
          ./scripts/update-packages.sh all

          # Check for different types of changes
          PACKAGE_CHANGES=$(git diff --quiet packages/ && echo "false" || echo "true")
          FLAKE_CHANGES=$(git diff --quiet flake.lock && echo "false" || echo "true")

          if [[ "$PACKAGE_CHANGES" == "false" && "$FLAKE_CHANGES" == "false" ]]; then
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "No updates needed"
          else
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "Updates applied"
            
            # Initialize update types
            echo "package-updates=$PACKAGE_CHANGES" >> $GITHUB_OUTPUT
            echo "flake-updates=$FLAKE_CHANGES" >> $GITHUB_OUTPUT

            # Handle package updates
            if [[ "$PACKAGE_CHANGES" == "true" ]]; then
              # Capture package changes for commit message
              git diff packages/ > /tmp/package_changes.diff

              # Parse version changes and create commit message details
              if ./scripts/parse-package-changes.sh /tmp/package_changes.diff > /tmp/commit_output.txt; then
                # Extract package names and details
                PACKAGE_NAMES=$(grep "^PACKAGES:" /tmp/commit_output.txt | cut -d: -f2)
                grep -A999 "^DETAILS:" /tmp/commit_output.txt | tail -n +2 > /tmp/commit_details.txt
                echo "package-names=$PACKAGE_NAMES" >> $GITHUB_OUTPUT
                echo "has-version-changes=true" >> $GITHUB_OUTPUT
              else
                echo "No version changes detected in packages"
                echo "has-version-changes=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "has-version-changes=false" >> $GITHUB_OUTPUT
            fi

            # Handle flake updates
            if [[ "$FLAKE_CHANGES" == "true" ]]; then
              # Extract flake input changes
              git diff flake.lock | grep -E '^\+.*"rev":|^\+.*"lastModified":' | head -10 > /tmp/flake_changes.txt || true
              echo "has-flake-changes=true" >> $GITHUB_OUTPUT
            else
              echo "has-flake-changes=false" >> $GITHUB_OUTPUT
            fi

            git status
          fi

      - name: Commit and push changes
        if: steps.update.outputs.update-needed == 'true' && (steps.update.outputs.has-version-changes == 'true' || steps.update.outputs.has-flake-changes == 'true')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add the appropriate files based on what changed
          if [[ "${{ steps.update.outputs.package-updates }}" == "true" ]]; then
            git add packages/
          fi
          if [[ "${{ steps.update.outputs.flake-updates }}" == "true" ]]; then
            git add flake.lock
          fi

          # Create commit message based on update types
          if [[ "${{ steps.update.outputs.has-version-changes }}" == "true" && "${{ steps.update.outputs.has-flake-changes }}" == "true" ]]; then
            # Both package and flake updates
            PACKAGE_DETAILS=$(cat /tmp/commit_details.txt)
            COMMIT_TITLE="Update packages and flake inputs: ${{ steps.update.outputs.package-names }}"
            COMMIT_BODY="$PACKAGE_DETAILS

          Updated flake inputs (nix-ai-tools)"
            
          elif [[ "${{ steps.update.outputs.has-version-changes }}" == "true" ]]; then
            # Package updates only
            PACKAGE_DETAILS=$(cat /tmp/commit_details.txt)
            COMMIT_TITLE="Update packages: ${{ steps.update.outputs.package-names }}"
            COMMIT_BODY="$PACKAGE_DETAILS"
            
          elif [[ "${{ steps.update.outputs.has-flake-changes }}" == "true" ]]; then
            # Flake updates only
            COMMIT_TITLE="Update flake inputs"
            COMMIT_BODY="Updated nix-ai-tools flake input"
          fi

          git commit -m "$COMMIT_TITLE

          $COMMIT_BODY

          Auto-updated by update-packages workflow"
          git push

      - name: Output results
        run: |
          echo "Update process completed"
          if [[ "${{ steps.update.outputs.update-needed }}" == "true" ]]; then
            # Check what was actually committed
            if [[ "${{ steps.update.outputs.has-version-changes }}" == "true" && "${{ steps.update.outputs.has-flake-changes }}" == "true" ]]; then
              echo "‚úÖ Package and flake updates applied and pushed to repository"
              echo "üì¶ Updated packages: ${{ steps.update.outputs.package-names }}"
              echo "üîÑ Updated flake input: nix-ai-tools"
            elif [[ "${{ steps.update.outputs.has-version-changes }}" == "true" ]]; then
              echo "‚úÖ Package updates applied and pushed to repository"  
              echo "üì¶ Updated packages: ${{ steps.update.outputs.package-names }}"
            elif [[ "${{ steps.update.outputs.has-flake-changes }}" == "true" ]]; then
              echo "‚úÖ Flake input updates applied and pushed to repository"
              echo "üîÑ Updated flake input: nix-ai-tools"
            else
              echo "‚ÑπÔ∏è Files changed but no significant updates detected - no commit made"
            fi
          else
            echo "‚ÑπÔ∏è No updates needed"
          fi
